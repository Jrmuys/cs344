The pearson correlation coefficient measures the linear correleation between two variables, meaning the two variables
variables follow the same line. One example is how on the chart, total bedrooms and population have a r of 0.9 which
suggests strong correlation which makes sense, becasue the more people you have, the more bedrooms you need.


TASK 1:
minimal_features = [
  "median_income",
  "latitude",
]

assert minimal_features, "You must select at least one feature!"

minimal_training_examples = training_examples[minimal_features]
minimal_validation_examples = validation_examples[minimal_features]

#
# Don't forget to adjust these parameters.
#
train_model(
    learning_rate=0.02,
    steps=500,
    batch_size=5,
    training_examples=minimal_training_examples,
    training_targets=training_targets,
    validation_examples=minimal_validation_examples,
    validation_targets=validation_targets)

FINAL RMSE
108.56
This beat Google's solution which was 112.60

TASK 2:
def feature_selection(source_df):
  LATITUDE_RANGES = zip(range(32, 44), range(33, 45))
  selected_examples = pd.DataFrame()
  selected_examples["median_income"] = source_df["median_income"]
  for r in LATITUDE_RANGES:
    selected_examples["latitude_%d_to_%d" % r] = source_df["latitude"].apply(
      lambda l: 1.0 if l >= r[0] and l < r[1] else 0.0)
  return selected_examples

selected_training_examples = feature_selection(training_examples)
selected_validation_examples = feature_selection(validation_examples)

_ = train_model(
    learning_rate=0.02,
    steps=500,
    batch_size=5,
    training_examples=selected_training_examples,
    training_targets=training_targets,
    validation_examples=selected_validation_examples,
    validation_targets=validation_targets)

FINAL RMSE
86.30
This beat Google's solution which was 139.23
